// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: doctor.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoctorServicesClient is the client API for DoctorServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoctorServicesClient interface {
	CreateDoctor(ctx context.Context, in *DoctorModel, opts ...grpc.CallOption) (*DoctorResponse, error)
	FetchDoctorByID(ctx context.Context, in *DoctorID, opts ...grpc.CallOption) (*DoctorModel, error)
	FetchDoctorByName(ctx context.Context, in *DoctorName, opts ...grpc.CallOption) (*DoctorModel, error)
	FetchAllDoctors(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*DoctorList, error)
}

type doctorServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorServicesClient(cc grpc.ClientConnInterface) DoctorServicesClient {
	return &doctorServicesClient{cc}
}

func (c *doctorServicesClient) CreateDoctor(ctx context.Context, in *DoctorModel, opts ...grpc.CallOption) (*DoctorResponse, error) {
	out := new(DoctorResponse)
	err := c.cc.Invoke(ctx, "/docpb.DoctorServices/CreateDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServicesClient) FetchDoctorByID(ctx context.Context, in *DoctorID, opts ...grpc.CallOption) (*DoctorModel, error) {
	out := new(DoctorModel)
	err := c.cc.Invoke(ctx, "/docpb.DoctorServices/FetchDoctorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServicesClient) FetchDoctorByName(ctx context.Context, in *DoctorName, opts ...grpc.CallOption) (*DoctorModel, error) {
	out := new(DoctorModel)
	err := c.cc.Invoke(ctx, "/docpb.DoctorServices/FetchDoctorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServicesClient) FetchAllDoctors(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*DoctorList, error) {
	out := new(DoctorList)
	err := c.cc.Invoke(ctx, "/docpb.DoctorServices/FetchAllDoctors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServicesServer is the server API for DoctorServices service.
// All implementations must embed UnimplementedDoctorServicesServer
// for forward compatibility
type DoctorServicesServer interface {
	CreateDoctor(context.Context, *DoctorModel) (*DoctorResponse, error)
	FetchDoctorByID(context.Context, *DoctorID) (*DoctorModel, error)
	FetchDoctorByName(context.Context, *DoctorName) (*DoctorModel, error)
	FetchAllDoctors(context.Context, *NoParam) (*DoctorList, error)
	mustEmbedUnimplementedDoctorServicesServer()
}

// UnimplementedDoctorServicesServer must be embedded to have forward compatible implementations.
type UnimplementedDoctorServicesServer struct {
}

func (UnimplementedDoctorServicesServer) CreateDoctor(context.Context, *DoctorModel) (*DoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (UnimplementedDoctorServicesServer) FetchDoctorByID(context.Context, *DoctorID) (*DoctorModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDoctorByID not implemented")
}
func (UnimplementedDoctorServicesServer) FetchDoctorByName(context.Context, *DoctorName) (*DoctorModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDoctorByName not implemented")
}
func (UnimplementedDoctorServicesServer) FetchAllDoctors(context.Context, *NoParam) (*DoctorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllDoctors not implemented")
}
func (UnimplementedDoctorServicesServer) mustEmbedUnimplementedDoctorServicesServer() {}

// UnsafeDoctorServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorServicesServer will
// result in compilation errors.
type UnsafeDoctorServicesServer interface {
	mustEmbedUnimplementedDoctorServicesServer()
}

func RegisterDoctorServicesServer(s grpc.ServiceRegistrar, srv DoctorServicesServer) {
	s.RegisterService(&DoctorServices_ServiceDesc, srv)
}

func _DoctorServices_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServicesServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docpb.DoctorServices/CreateDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServicesServer).CreateDoctor(ctx, req.(*DoctorModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorServices_FetchDoctorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServicesServer).FetchDoctorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docpb.DoctorServices/FetchDoctorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServicesServer).FetchDoctorByID(ctx, req.(*DoctorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorServices_FetchDoctorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServicesServer).FetchDoctorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docpb.DoctorServices/FetchDoctorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServicesServer).FetchDoctorByName(ctx, req.(*DoctorName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorServices_FetchAllDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServicesServer).FetchAllDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docpb.DoctorServices/FetchAllDoctors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServicesServer).FetchAllDoctors(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// DoctorServices_ServiceDesc is the grpc.ServiceDesc for DoctorServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoctorServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "docpb.DoctorServices",
	HandlerType: (*DoctorServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctor",
			Handler:    _DoctorServices_CreateDoctor_Handler,
		},
		{
			MethodName: "FetchDoctorByID",
			Handler:    _DoctorServices_FetchDoctorByID_Handler,
		},
		{
			MethodName: "FetchDoctorByName",
			Handler:    _DoctorServices_FetchDoctorByName_Handler,
		},
		{
			MethodName: "FetchAllDoctors",
			Handler:    _DoctorServices_FetchAllDoctors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doctor.proto",
}
