// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: admin.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AdminLogin(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*AdminResponse, error)
	FindUserByEmailFn(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	FindUserByIDFn(ctx context.Context, in *AUserID, opts ...grpc.CallOption) (*User, error)
	FindAllUsersFn(ctx context.Context, in *AdminNoParam, opts ...grpc.CallOption) (*UserList, error)
	EditUserFn(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*AdminResponse, error)
	DeleteUserFn(ctx context.Context, in *AUserID, opts ...grpc.CallOption) (*AdminResponse, error)
	CreateDoctor(ctx context.Context, in *DoctorModel, opts ...grpc.CallOption) (*AdminResponse, error)
	UserFetchDoctorByID(ctx context.Context, in *DoctorID, opts ...grpc.CallOption) (*DoctorModel, error)
	UserFetchDoctorByName(ctx context.Context, in *DoctorName, opts ...grpc.CallOption) (*DoctorModel, error)
	UserFetchAllDoctors(ctx context.Context, in *AdminNoParam, opts ...grpc.CallOption) (*DoctorList, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AdminLogin(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/AdminLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindUserByEmailFn(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/FindUserByEmailFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindUserByIDFn(ctx context.Context, in *AUserID, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/FindUserByIDFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindAllUsersFn(ctx context.Context, in *AdminNoParam, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/FindAllUsersFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EditUserFn(ctx context.Context, in *UserModel, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/EditUserFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUserFn(ctx context.Context, in *AUserID, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/DeleteUserFn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDoctor(ctx context.Context, in *DoctorModel, opts ...grpc.CallOption) (*AdminResponse, error) {
	out := new(AdminResponse)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/CreateDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UserFetchDoctorByID(ctx context.Context, in *DoctorID, opts ...grpc.CallOption) (*DoctorModel, error) {
	out := new(DoctorModel)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/UserFetchDoctorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UserFetchDoctorByName(ctx context.Context, in *DoctorName, opts ...grpc.CallOption) (*DoctorModel, error) {
	out := new(DoctorModel)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/UserFetchDoctorByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UserFetchAllDoctors(ctx context.Context, in *AdminNoParam, opts ...grpc.CallOption) (*DoctorList, error) {
	out := new(DoctorList)
	err := c.cc.Invoke(ctx, "/adminpb.AdminService/UserFetchAllDoctors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	AdminLogin(context.Context, *AdminRequest) (*AdminResponse, error)
	FindUserByEmailFn(context.Context, *UserRequest) (*User, error)
	FindUserByIDFn(context.Context, *AUserID) (*User, error)
	FindAllUsersFn(context.Context, *AdminNoParam) (*UserList, error)
	EditUserFn(context.Context, *UserModel) (*AdminResponse, error)
	DeleteUserFn(context.Context, *AUserID) (*AdminResponse, error)
	CreateDoctor(context.Context, *DoctorModel) (*AdminResponse, error)
	UserFetchDoctorByID(context.Context, *DoctorID) (*DoctorModel, error)
	UserFetchDoctorByName(context.Context, *DoctorName) (*DoctorModel, error)
	UserFetchAllDoctors(context.Context, *AdminNoParam) (*DoctorList, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) AdminLogin(context.Context, *AdminRequest) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminServiceServer) FindUserByEmailFn(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmailFn not implemented")
}
func (UnimplementedAdminServiceServer) FindUserByIDFn(context.Context, *AUserID) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByIDFn not implemented")
}
func (UnimplementedAdminServiceServer) FindAllUsersFn(context.Context, *AdminNoParam) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllUsersFn not implemented")
}
func (UnimplementedAdminServiceServer) EditUserFn(context.Context, *UserModel) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserFn not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUserFn(context.Context, *AUserID) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFn not implemented")
}
func (UnimplementedAdminServiceServer) CreateDoctor(context.Context, *DoctorModel) (*AdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (UnimplementedAdminServiceServer) UserFetchDoctorByID(context.Context, *DoctorID) (*DoctorModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFetchDoctorByID not implemented")
}
func (UnimplementedAdminServiceServer) UserFetchDoctorByName(context.Context, *DoctorName) (*DoctorModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFetchDoctorByName not implemented")
}
func (UnimplementedAdminServiceServer) UserFetchAllDoctors(context.Context, *AdminNoParam) (*DoctorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFetchAllDoctors not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/AdminLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminLogin(ctx, req.(*AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindUserByEmailFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindUserByEmailFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/FindUserByEmailFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindUserByEmailFn(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindUserByIDFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindUserByIDFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/FindUserByIDFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindUserByIDFn(ctx, req.(*AUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindAllUsersFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindAllUsersFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/FindAllUsersFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindAllUsersFn(ctx, req.(*AdminNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EditUserFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EditUserFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/EditUserFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EditUserFn(ctx, req.(*UserModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUserFn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUserFn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/DeleteUserFn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUserFn(ctx, req.(*AUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/CreateDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDoctor(ctx, req.(*DoctorModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UserFetchDoctorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UserFetchDoctorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/UserFetchDoctorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UserFetchDoctorByID(ctx, req.(*DoctorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UserFetchDoctorByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UserFetchDoctorByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/UserFetchDoctorByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UserFetchDoctorByName(ctx, req.(*DoctorName))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UserFetchAllDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminNoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UserFetchAllDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.AdminService/UserFetchAllDoctors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UserFetchAllDoctors(ctx, req.(*AdminNoParam))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adminpb.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminLogin",
			Handler:    _AdminService_AdminLogin_Handler,
		},
		{
			MethodName: "FindUserByEmailFn",
			Handler:    _AdminService_FindUserByEmailFn_Handler,
		},
		{
			MethodName: "FindUserByIDFn",
			Handler:    _AdminService_FindUserByIDFn_Handler,
		},
		{
			MethodName: "FindAllUsersFn",
			Handler:    _AdminService_FindAllUsersFn_Handler,
		},
		{
			MethodName: "EditUserFn",
			Handler:    _AdminService_EditUserFn_Handler,
		},
		{
			MethodName: "DeleteUserFn",
			Handler:    _AdminService_DeleteUserFn_Handler,
		},
		{
			MethodName: "CreateDoctor",
			Handler:    _AdminService_CreateDoctor_Handler,
		},
		{
			MethodName: "UserFetchDoctorByID",
			Handler:    _AdminService_UserFetchDoctorByID_Handler,
		},
		{
			MethodName: "UserFetchDoctorByName",
			Handler:    _AdminService_UserFetchDoctorByName_Handler,
		},
		{
			MethodName: "UserFetchAllDoctors",
			Handler:    _AdminService_UserFetchAllDoctors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
